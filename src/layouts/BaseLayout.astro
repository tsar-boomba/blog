---
import '@/styles/global.scss';
import '@/styles/theme.scss';
import Header from '@/components/Header/Header.astro';
import Footer from '@/components/Footer/Footer.astro';
import Stars from '@/components/Stars/Stars.astro';

export interface Props {
	title?: string;
	description: string;
	noHeader?: boolean;
	noFooter?: boolean;
	metas?: { name: string; content: string }[];
}

const { title, description, noHeader, noFooter } = Astro.props as Props;
---

<html data-theme='dark' data-tab-size="4" lang='en'>
	<head>
		<meta charset='utf-8' />
		<meta name='generator' content={Astro.generator} />
		<link
			rel='icon'
			href='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 256 256%22><text y=%22203%22 font-size=%22224%22>ðŸ’£</text></svg>'
		/>
		<title>{title || 'Isaiah Gamble Blog'}</title>
		<meta name='description' content={description} />
		<meta name='viewport' content='width=device-width, initial-scale=1' />

		{Astro.props.metas?.map((meta) => <meta {...meta} />)}

		<script is:inline>
			// this exists to stop theme from flashing by setting it before css is evaluated
			;(function () {
				var theme;
				var storedTheme = localStorage.getItem('theme');

				if (storedTheme) {
					theme = storedTheme;
				} else {
					theme = matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
				}

				document.querySelector('html').dataset.theme = theme;
			})();
		</script>
		<script>
			// setup mutation observer to fire event whenever theme changes
			const observer = new MutationObserver((list) => {
				const mutation = list[0];
				if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
					window.dispatchEvent(
						new CustomEvent('themeChange', {
							detail: {
								newTheme: (mutation.target as HTMLHtmlElement).dataset.theme,
							},
						}),
					);
				}
			});
			observer.observe(document.querySelector('html')!, {
				childList: false,
				attributes: true,
				subtree: false,
			});
		</script>
		<style lang='scss'>
			.main {
				flex-grow: 1;
				padding: 1rem;
				padding-top: 60px;
			}
		</style>
	</head>
	<body>
		<Stars />
		{!noHeader && <Header />}
		<main class='main'>
			<slot />
		</main>
		{!noFooter && <Footer />}
	</body>
</html>
