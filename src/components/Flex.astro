---
import { handleStyleProps, resolveUnit, StyleProps } from '@/utils/handleStyleProps';
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	align?: 'center' | 'flex-start' | 'flex-end';
	justify?: 'center' | 'flex-start' | 'flex-end';
	gap?: string | number;
	component?: keyof HTMLElementTagNameMap;
	direction?: 'row' | 'column';
	noWrap?: boolean;
} & StyleProps;

const { as: Tag = 'div', class: className, style: ogStyle, ...props } = Astro.props;
let styles = { ...ogStyle, ...handleStyleProps(props) };

if (props.align) {
	styles.alignItems = props.align;
}

if (props.justify) {
	styles.justifyContent = props.justify;
}

if (props.direction) {
	styles.flexDirection = props.direction;
}

if (props.noWrap) {
	styles.flexWrap = 'nowrap';
}

if (props.gap) {
	styles.gap = resolveUnit(props.gap);
}
---

<style lang='scss'>
	.root {
		display: flex;
		flex-flow: wrap;
	}
</style>
<Tag {...props} style={styles} class:list={['root', className]}><slot /></Tag>
